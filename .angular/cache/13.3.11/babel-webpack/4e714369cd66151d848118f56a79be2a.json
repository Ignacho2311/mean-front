{"ast":null,"code":"import { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = environment.baseUrl;\n    }\n\n    get user() {\n      return this._user;\n    }\n\n    login(data) {\n      return this.httpClient.post(`${this.baseUrl}/auth/login`, data).pipe(tap(res => {\n        if (res.ok === true) {\n          this._user = {\n            id: res.id,\n            username: res.username,\n            token: res.token\n          };\n        } else {\n          this._user = null;\n        }\n      }), map(res => res.ok), catchError(err => of(err.error.msg)));\n    }\n\n    register(data) {\n      return this.httpClient.post(`${this.baseUrl}/auth/register`, data).pipe(tap(res => {\n        if (res.ok === true) {\n          this._user = {\n            id: res.id,\n            username: res.username,\n            token: res.token\n          };\n        } else {\n          this._user = null;\n        }\n      }), map(res => res.ok), catchError(err => of(err.error.msg)));\n    }\n\n    validarToken() {\n      const token = JSON.parse(localStorage.getItem(\"user\"));\n\n      if (token) {\n        return new Observable(subscriber => {\n          subscriber.next(true);\n        });\n      } else {\n        return new Observable(subscriber => {\n          subscriber.next(false);\n        });\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}